# -*- coding: utf-8 -*-
"""Trend Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bnn5_7TqIoKdBCzNVjjvASa-PGSzE2Vy
"""

import  pandas as pd

df = pd.read_csv('/content/drive/MyDrive/MSc Dissertation/diss.csv')
df.head()

from collections import Counter
import re

# Clean the text to extract common words
def clean_text(text):
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove punctuation
    text = text.lower()  # Lowercase
    return text

# Apply cleaning
df['clean_text'] = df['Review'].astype(str).apply(clean_text)

# Split all words into one list
all_words = ' '.join(df['clean_text']).split()

# Count word frequencies
word_freq = Counter(all_words)

# Get the top 50 most common words
top_words = word_freq.most_common(50)
top_words

import pandas as pd

# Display full review text in outputs
pd.set_option('display.max_colwidth', None)

# Define the classification function
def get_issue(text):
    text = text.lower()

    # Delivery-related issues
    if any(word in text for word in [
        'delivery', 'missing', 'late', 'slot', 'driver', 'parcel',
        'order', 'not arrived', 'click and collect', 'click & collect',
        'click & collect order', 'collect slot', 'no delivery'
    ]):
        return 'Delivery Problem'

    # Billing, pricing, promotions, financial complaints
    elif any(word in text for word in [
        'refund', 'charged', 'charge', 'payment', 'card', 'bill', 'cashless',
        'loan', 'credit', 'debit', 'clubcard', 'clubcard points', 'price',
        'expensive', 'rip off', 'discount missing', 'no discount',
        'voucher not working', 'false offer', 'overcharged', 'receipt wrong',
        'scam price', 'profiteering'
    ]):
        return 'Billing/Payment'

    # App or technical issues ‚Äì now includes install/uninstall and flexible phrasing
    elif any(phrase in text for phrase in [
        'app not working', 'app isn‚Äôt working', 'app isn\'t working', 'app is down',
        'app has stopped working', 'app stopped working', 'app on my phone has stopped working',
        'app on my phone stopped working', 'app crashed', 'app keeps crashing',
        'app won‚Äôt open', 'app wont open', 'app doesn‚Äôt open', 'app does not open',
        'cannot login', 'can‚Äôt login', 'cant login', 'unable to login', 'login failed',
        'technical issue', 'technical problem', 'scanner not working', 'bug in app',
        'glitch', 'error message', 'error code', 'website not loading', 'website down',
        'barcode not working', 'issue with barcode', 'scan and go not working',
        'scan & go not working', 'scan and go failed', 'app froze', 'app freezing',
        'problem with app', 'crash', 'install', 'uninstall', 'reinstall',
        'installed the app', 're-install', 'uninstalled the app', 'reinstalled the app',
        'try reinstalling', 'tried reinstalling'
    ]):
        return 'App/Tech Issue'

    # Advertising, political messaging, misleading marketing
    elif any(word in text for word in [
        'advert', 'advertising', 'christmas ad', 'xmas', 'marketing', 'vaccine',
        'covid advert', 'media', 'propaganda', 'scam', 'promo', 'voucher', 'boycott',
        'supporting farmers', 'brand', 'misleading ad', 'clubcard trick',
        'false advertising', 'tv advert', 'political message', 'greenwashing'
    ]):
        return 'Advertising/Marketing Issue'

    # Staff behavior and in-store experience
    elif any(word in text for word in [
        'staff', 'manager', 'attitude', 'rude', 'employee', 'unprofessional', 'policy',
        'mask', 'rules', 'enforce', 'security', 'abused', 'disability', 'autism',
        'verbal', 'racist', 'harassed', 'touched', 'parking ticket', 'hygiene'
    ]):
        return 'Staff Interaction'

    # Customer service and call centre complaints
    elif any(word in text for word in [
        'customer service', 'customer services', 'support', 'helpline', 'complaint', 'representative', 'ignored',
        'call centre', 'hung up', 'couldn‚Äôt reach', 'couldnt reach', 'awful customer service', 'phone down',
        'unreachable', 'no answer'
    ]):
        return 'Customer Service'

    # Queues, waiting time, checkout delays
    elif any(word in text for word in [
        'queue', 'waiting', 'line', 'long wait', 'checkout', 'delay', 'till'
    ]):
        return 'Waiting Time'

    # Quality or safety of food or product
    elif any(word in text for word in [
        'expired', 'damaged', 'wrong item', 'quality', 'quality of food', 'stale', 'mould', 'packaging',
        'rotten', 'burnt', 'bland', 'rubbery', 'tasteless', 'no filling', 'disgusting',
        'awful taste', 'inedible', 'went in the bin', 'wouldn‚Äôt eat', 'wouldnt eat',
        'dry', 'tough meat', 'hard beans', 'old oil', 'smelled bad',
        'pilling', 'material quality', 'poor quality', 'fabric issue',
        'clothing quality', 'clothes wear out'
    ]):
        return 'Product Quality'

    # Fuel-related complaints
    elif any(word in text for word in [
        'petrol', 'fuel', 'esso'
    ]):
        return 'Fuel Station'

    # Catch-all
    else:
        return 'Other'

# Load your data (replace this with your actual file if needed)
# df = pd.read_csv('your_reviews_file.csv')

# Ensure 'Review' column is string type
df['Review'] = df['Review'].astype(str)

# Apply classification
df['issue'] = df['Review'].apply(get_issue)

# View random samples
df[['Review', 'issue']].sample(10)

issue_counts = df['issue'].value_counts().reset_index()
issue_counts.columns = ['Issue Category', 'Count']
issue_counts

df[df['issue'] == 'Other'][['Review']].head(10)

issue_df = df['issue'].value_counts().reset_index()
issue_df.columns = ['Issue Category', 'Count']

import matplotlib.pyplot as plt

# Plotting horizontal bar chart
plt.figure(figsize=(10, 6))
plt.barh(issue_df['Issue Category'], issue_df['Count'], edgecolor='black')
plt.title('Number of Reviews per Issue Category - Tesco Stores')
plt.xlabel('Review Count')
plt.ylabel('Issue Category')
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

df['year'] = pd.to_datetime(df['Year']).dt.year

df['year'] = pd.to_datetime(df['Year'], errors='coerce').dt.year

issue_by_year = df.groupby(['year', 'issue']).size().unstack(fill_value=0)

df['year'] = df['Year'].astype(int)

df.head()

issue_by_year = df.groupby(['year', 'issue']).size().unstack(fill_value=0)

import pandas as pd
import matplotlib.pyplot as plt

# STEP 1: Fix the year column
df['year'] = df['Year'].astype(int)

# STEP 2: Merge 'Staff Interaction' + 'Customer Service' into 'Staff & Service Issue'
df['issue'] = df['issue'].replace({
    'Staff Interaction': 'Staff & Service Issue',
    'Customer Service': 'Staff & Service Issue'
})

# STEP 3: Get top 5 issues (after merging)
top_5_issues = df['issue'].value_counts().nlargest(5).index

# STEP 4: Group data by year and issue (top 5 only)
issue_by_year_top5 = df[df['issue'].isin(top_5_issues)].groupby(['year', 'issue']).size().unstack(fill_value=0)

# STEP 5: Plot line chart
plt.figure(figsize=(14, 7))
for column in issue_by_year_top5.columns:
    plt.plot(issue_by_year_top5.index, issue_by_year_top5[column], marker='o', linewidth=2, label=column)

plt.title('Top 5 Review Issues Over Time (2020‚Äì2025) - Tesco Stores', fontsize=16)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Number of Reviews')
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend(title='Issue Category', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(issue_by_year_top5.index)
plt.tight_layout()
plt.show()

import  pandas as pd

df2 = pd.read_csv('/content/drive/MyDrive/MSc Dissertation/t_bank.csv')

df2.head()

from collections import Counter
import re

# Step 1: Fix weird special characters
def fix_encoding(text):
    try:
        return text.encode('latin1').decode('utf-8')
    except:
        return text

# Step 2: Clean text ‚Äì remove punctuation, lowercase, etc.
def clean_text(text):
    text = fix_encoding(text)  # Apply encoding fix first
    text = re.sub(r'[^a-zA-Z\s]', '', str(text))  # Remove punctuation
    return text.lower()  # Lowercase

# Apply both fixes to Tesco Bank reviews
df2['cleaned_review'] = df2['Review'].apply(clean_text)

# Combine all cleaned text into one big list of words
all_words = ' '.join(df2['cleaned_review']).split()

# Count word frequencies
word_freq = Counter(all_words)

# Get top 50 most common keywords
top_50_words = word_freq.most_common(50)
top_50_words

# Refined Issue Classifier for Tesco Bank Reviews (with Staff and Wait Time handling)
def get_issue_bank(text):
    text = str(text).lower()

    # üíº Savings & account access issues
    if any(word in text for word in [
        'savings', 'bond', 'maturity', 'withdraw', 'withdrawing money', 'account access',
        'form timeout', 'login questions', 'paperwork', 'certificate of interest'
    ]):
        return 'Savings/Account Access Issue'

    # üßæ Insurance-related issues
    elif any(word in text for word in [
        'insurance', 'premium', 'vehicle', 'claim', 'policy', 'policies', 'cover',
        'car insurance', 'pet insurance', 'travel insurance'
    ]):
        return 'Insurance Claim Issue'

    # üí≥ Credit card issues
    elif any(word in text for word in [
        'credit card', 'credit limit', 'balance transfer', 'credit file', 'credit rating', 'credit record', 'credit score',
        'card declined', 'interest rate', 'apr', 'late payment', 'charged interest', 'interest charge', 'early payment fee'
    ]):
        return 'Credit Card Issue'

    # üí∞ Loan & affordability issues
    elif any(word in text for word in [
        'loan', 'declined', 'eligibility', 'affordability', 'loan application',
        'loan offer', 'slow application'
    ]):
        return 'Loan/Affordability Issue'

    # üîê Fraud/security concerns
    elif any(word in text for word in [
        'fraud', 'unauthorised', 'unauthorized', 'scam', 'security'
    ]):
        return 'Fraud/Security Issue'

    # ‚öôÔ∏è App/technical issues
    elif any(word in text for word in [
        'app', 'login', 'technical issue', 'error', 'web', 'portal', 'site', 'log on', 'glitch', 'bug',
        'timeout', 'form timeout', 'clubcard pay', 'mobile signal', 'login process'
    ]):
        return 'App/Tech Issue'

    # üë• Staff behaviour / professionalism
    elif any(word in text for word in [
        'rude', 'agent was rude', 'unprofessional', 'didn‚Äôt listen', 'wouldn‚Äôt listen',
        'hung up', 'manager refused', 'no knowledge', 'staff attitude', 'passed around',
        'agent didn‚Äôt help', 'staff not helpful', 'rep was rude'
    ]):
        return 'Staff Behaviour/Professionalism'

    # ‚òéÔ∏è Customer service / communication issues (includes wait time complaints)
    elif any(word in text for word in [
        'customer service', 'support', 'call', 'e-mail address', 'phone', 'unreachable', 'the wait', 'helpdesk',
        'on hold', 'waited', 'waiting too long', 'long wait', 'no response', 'still waiting',
        'delayed response', 'couldn‚Äôt get through', 'no reply', 'awful service', 'ignored',
        'contacted', 'spoke to', 'emailed', 'communication', 'no answer', 'ombudsman'
    ]):
        return 'Customer Service'

    # ‚ùî Fallback
    else:
        return 'Other'


# üëâ Ensure 'Review' column is string type
df2['Review'] = df2['Review'].astype(str)

# üîç Apply classifier to reviews
df2['refined_issue'] = df2['Review'].apply(get_issue_bank)

# üëÄ Preview top 10 classified reviews
df2[['Review', 'refined_issue']].sample(10)

issue_counts = df2['refined_issue'].value_counts().reset_index()
issue_counts.columns = ['Bank Issue Category', 'Count']
issue_counts

df2[df2['refined_issue'] == 'Other'][['Review']].sample(40)

import matplotlib.pyplot as plt

# üî¢ Count issue categories
issue_counts = df2['refined_issue'].value_counts().reset_index()
issue_counts.columns = ['Issue Category', 'Count']

# üìä Plot horizontal bar chart
plt.figure(figsize=(10, 6))
plt.barh(issue_counts['Issue Category'], issue_counts['Count'], color='orange')
plt.xlabel('Number of Reviews')
plt.title('Number of Reviews per Issue Category - Tesco Bank')
plt.gca().invert_yaxis()  # Show most common on top

# üî¢ Add count labels
for i, (category, count) in enumerate(zip(issue_counts['Issue Category'], issue_counts['Count'])):
    plt.text(count + 5, i, str(count), va='center', fontsize=9)

plt.tight_layout()
plt.show()

df2['Date'].sample(10)

# Directly convert 'Date' to numeric year
df2['year'] = pd.to_numeric(df2['Date'], errors='coerce')
df2['year'].value_counts().sort_index()

df2.columns

import matplotlib.pyplot as plt

# Filter for valid years
df_trend = df2[(df2['year'] >= 2020) & (df2['year'] <= 2025)]

# Get top 5 issue categories
top_issues = df_trend['refined_issue'].value_counts().nlargest(5).index

# Filter only those issues
df_trend = df_trend[df_trend['refined_issue'].isin(top_issues)]

# Group by year and issue category
issue_trend = df_trend.groupby(['year', 'refined_issue']).size().unstack(fill_value=0)

# Plot
plt.figure(figsize=(10, 6))
for issue in issue_trend.columns:
    plt.plot(issue_trend.index, issue_trend[issue], marker='o', label=issue)

plt.title('Tesco Bank: Top 5 Review Issues Over Time (2020‚Äì2025)')
plt.xlabel('Year')
plt.ylabel('Number of Reviews')
plt.grid(True)
plt.legend(title='Issue Category')
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Standardize and relabel issues
df['issue'] = df['issue'].replace({'Customer Service': 'Staff & Service Issue'})
df['brand'] = 'Tesco Store'

df2['issue'] = df2['refined_issue']
df2['brand'] = 'Tesco Bank'

# Step 2: Filter for selected issues only
selected_issues_bank = ['Insurance Claim Issue', 'Credit Card Issue', 'Customer Service', 'App/Tech Issue']
selected_issues_store = ['Delivery Problem', 'Billing/Payment', 'Advertising/Marketing Issue', 'Staff & Service Issue']

df_filtered = df[df['issue'].isin(selected_issues_store)][['year', 'issue', 'brand']]
df2_filtered = df2[df2['issue'].isin(selected_issues_bank)][['year', 'issue', 'brand']]

# Step 3: Combine both
combined_df = pd.concat([df_filtered, df2_filtered], ignore_index=True)

# Step 4: Group and count
issue_trend_combined = (
    combined_df.groupby(['year', 'brand', 'issue'])
    .size()
    .reset_index(name='count')
)

# Step 5: Define more vibrant custom colors
custom_palette = {
    'Insurance Claim Issue': '#D7263D',
    'Credit Card Issue': '#F4A261',
    'Customer Service': '#2A9D8F',
    'App/Tech Issue': '#264653',
    'Delivery Problem': '#F72585',
    'Billing/Payment': '#FFB703',
    'Advertising/Marketing Issue': '#7209B7',
    'Staff & Service Issue': '#0077B6',
}

plt.figure(figsize=(16, 8))
sns.set_style("whitegrid")

sns.lineplot(
    data=issue_trend_combined,
    x='year', y='count',
    hue='issue', style='brand',
    markers=True, dashes=True,
    palette=custom_palette,
    linewidth=2.5,
    markersize=8,
)

plt.title('Tesco Bank vs Tesco Stores: Review Issue Trends (2020‚Äì2025)', fontsize=16)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Number of Reviews', fontsize=12)

# ‚úÖ Updated legend with capitalized section titles
handles, labels = plt.gca().get_legend_handles_labels()
from matplotlib.legend import Legend

plt.legend(
    handles=handles,
    labels=labels,
    title='Issue / Brand',
    title_fontsize=13,
    fontsize=11,
    loc='center left',
    bbox_to_anchor=(1, 0.5)
)

plt.xticks(fontsize=11)
plt.yticks(fontsize=11)
plt.tight_layout()
plt.show()